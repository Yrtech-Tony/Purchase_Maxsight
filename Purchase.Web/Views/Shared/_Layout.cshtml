<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - 卓思采购管理平台</title>
    <!-- Bootstrap -->
    <link href="~/Content/bootstrap.min.css" rel="stylesheet">
    <link href="~/Content/font-awesome.min.css" rel="stylesheet" />
    <link href="~/Content/select/css/bootstrap-select.css" rel="stylesheet" />
    <!--[if IE 7]>
        <link rel="stylesheet" href="css/font-awesome-ie7.min.css">
    <![endif]-->
    <link rel="stylesheet" href="~/Content/style.css?v=20171221">
    <link href="~/Content/fix-column-head.css?v=20171210" rel="stylesheet" />
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
        <script src="~/Scripts/respond.min.js"></script>
        <script src="~/Scripts/html5shiv.min.js"></script>
    <![endif]-->
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="~/Scripts/jquery-1.10.2.min.js"></script>
    <script src="~/Scripts/jquery-ui.min.js"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="~/Scripts/bootstrap.min.js"></script>
    <script src="~/Scripts/bootstrap-paginator.js"></script>
    <script src="~/Scripts/custom/comm.js?v=20170607"></script>
    <script src="~/Content/select/js/bootstrap-select.js?v=20170331"></script>
    <script src="~/Scripts/custom/fix-column-head.js?v=20171210"></script>
    <script>
        function isEmptyOrNull(value) {
            if (value && value.length > 0) {
                return false;
            }
            return true;
        }
    </script>
</head>
<body>
    <div class="top-bg  navbar-fixed-top">
        <div class="top inline-block-father">
            <div class="logo inline-block">卓思</div>
            <a class="i-link inline-block" href="/">首页</a>
            <div class="info">
                @if (Request.IsAuthenticated)
                {
                    <span class="inline-block">欢迎进入卓思采购管理平台</span>
                }
                else
                {
                    string username = ((Purchase.DAL.Mst_UserInfo)Session["LoginUser"]).UserName;
                    <span class="inline-block">@username，欢迎进入卓思采购管理平台</span>
                }
                <a class="inline-block changepassword" href="/Account/ChangePassword">修改密码</a>
                <a class="inline-block exit" href="/Account/Logoff">退出</a>
                @*<a class="inline-block help" href="#">帮助</a>*@
            </div>
        </div>
    </div>
    <div class="container-fluid mt10" style="padding-bottom:45px;padding-top:70px">
        @RenderBody()
    </div>
    <div class="container-fluid bottom">
        <div class="tip text-center">
            本系统需要运行在IE11、谷歌、火狐等浏览器
        </div>
    </div>
    <style>
        ul.pagination > li > span, ul.pagination > li > a, ul.pagination > li.active > a, ul.pager > li > span {
            cursor: pointer;
        }

        .input-page-div > input {
            width: 5em;
            height: 1.8em;
            margin: 0.4em 0.2em 0.2em 0.2em;
            text-align: center;
        }

        .input-page-div > .input-btn-xs {
            margin-left: 1em;
            font-size: 1em;
            width: 3em;
            background-color: #337ab7;
            color: #fff;
        }

        .input-page-div {
            display: inline-block;
            margin-left: 1em;
        }
    </style>
    <script>
        function getQueryString(name) {
            var reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)', 'i');
            var r = decodeURIComponent(window.location.search.substr(1)).match(reg);
            if (r != null) {
                return unescape(r[2]);
            }
            return null;
        }
        function addOption(el, value, text) {
            return el.append($("<option>").val(value).html(text));
        }
        function initPages(curPage, pageCount, search) {
            $('#pageUl').empty();
            if (pageCount == 0) return;
            var options = {
                bootstrapMajorVersion: 3, //版本
                currentPage: curPage, //当前页数
                totalPages: pageCount, //总页数
                itemTexts: function (type, page, current) {
                    switch (type) {
                        case "first":
                            return "首页";
                        case "prev":
                            return "上一页";
                        case "next":
                            return "下一页";
                        case "last":
                            return "末页";
                        case "page":
                            return page;
                    }
                },
                //点击事件，用于通过Ajax来刷新整个list列表
                onPageClicked: function (event, originalEvent, type, page) {
                    if (search) {
                        search(page);
                    } else {
                        alert("onPageClicked事件没有设置查询方法");
                    }
                }
            }
            $('#pageUl').bootstrapPaginator(options);
        }

        $(function () {
            $("select").addClass("selectpicker").prop("title", "").data("live-search", true);

            $('.modal').modal({ backdrop: 'static', show: false });

            $(document).on("show.bs.modal", ".modal", function () {
                $(this).draggable({
                    //handle: ".modal-header",
                    cursor: 'move',
                    refreshPositions: false
                });
                $(this).css("overflow", "hidden"); // 防止出现滚动条，出现的话，你会把滚动条一起拖着走的
            });
            $(document).ajaxComplete(function (event, result, options) {
                try {
                    $(".btn-check").button('reset');
                    if (result.responseText.charAt(0) != '{')
                        return;
                    var result = $.parseJSON(result.responseText);
                    if (result.Status == 401) {
                        alert(result.Message, function () {
                            window.location.href = "/Account/Login";
                        });
                    }
                } catch (ex) {

                }
            });
            $(document).ajaxError(function (event, response, options) {
                if (response) {
                    var data = JSON.parse(response.responseText);
                    $("#btnLogin").button('reset');
                    $(".btn-check").button('reset');                    
                    alert(data.ErrMsg);
                }
            })

            var title = '@ViewBag.Title';
            $(".menu a").each(function () {
                if ($(this).html() == title) {
                    $(this).addClass("active");
                } else {
                    $(this).removeClass("active");
                }
            })
        });
        function isEmpty(value) {
            if (value == "")
                return true;
            else
                return false;
        }
        function nbsp2Space(str) {
            var arrEntities = { 'nbsp': ' ' };
            return str.replace(/&(nbsp);/ig, function (all, t) { return arrEntities[t] })
        }

        //分页，页码导航,要求参数为一个对象
        function createPageNav(opt) {
            opt = opt || {};
            if (opt.$container && opt.pageCount == 0) {
                $(opt.$container).empty();
            }
            var $container = opt.$container || null, //必需，页码容器，请确保这个容器只用来存放页码导航
                pageCount = Number(opt.pageCount) || 0,    //必需，页码总数
                currentNum = Number(opt.currentNum) || 1,    //选填，当前页码
                maxCommonLen = Number(opt.maxCommonLen) || 10,   //选填，普通页码的最大个数

                className = opt.className || "pagination",//选填，分页类型：pagination或pager等
                preText = opt.preText || "上一页",      //选填，上一页文字显示，适用于只有前后页按钮的情况
                nextText = opt.nextText || "下一页",      //选填，下一页文字，同上
                firstText = opt.firstText || "首页",
            lastText = opt.lastText || "末页",

                hasFirstBtn = opt.hasFirstBtn === false ? false : true,
                hasLastBtn = opt.hasLastBtn === false ? false : true,
                hasPreBtn = opt.hasPreBtn === false ? false : true,
                hasNextBtn = opt.hasNextBtn === false ? false : true,
                hasInput = opt.hasInput === false ? false : true,
                hasCommonPage = opt.hasCommonPage === false ? false : true,//选填，是否存在普通页

                beforeFun = opt.beforeFun || null,  //选填，页码跳转前调用的函数，可通过返回false来阻止跳转，可接收目标页码参数
                afterFun = opt.afterFun || null,  //选填，页码跳转后调用的函数，可接收目标页码参数
                noPageFun = opt.noPageFun || null;  //选填，页码总数为0时调用的函数

            //当前显示的最小页码，用于计算起始页码，直接容器,当前页，前，后，首，末，输入框
            var minNum = 1, changeLen, $parent, $currentPage, $preBtn, $nextBtn, $firstBtn, $lastBtn, $input;

            //容器
            if (!$container || $container.length != 1) {
                console.log("分页容器不存在或不正确");
                return false;
            }
            //总页数
            if (pageCount <= 0) {
                if (noPageFun) noPageFun();
                return false;
            }
            //当前页
            if (currentNum < 1) currentNum = 1;
            else if (currentNum > pageCount) currentNum = pageCount;
            //普通页码的最大个数，起始页算法限制，不能小于3
            if (maxCommonLen < 3) maxCommonLen = 3;
            //跳转页响应长度，用于计算起始页码
            if (maxCommonLen >= 8) changeLen = 3;
            else if (maxCommonLen >= 5) changeLen = 2;
            else changeLen = 1;

            $container.hide();
            _initPageNav();
            $container.show();

            function _initPageNav() {
                var initStr = [];
                initStr.push('<nav><ul class="' + className + '" onselectstart="return false">');
                if (hasFirstBtn) initStr.push('<li class="first-page" value="1"><span>' + firstText + '</span></li>');
                if (hasPreBtn) initStr.push('<li class="pre-page"  value="' + (currentNum - 1) + '"><span>' + preText + '</span></li>');
                if (hasNextBtn) initStr.push('<li class="next-page" value="' + (currentNum + 1) + '"><span>' + nextText + '</span></li>');
                if (hasLastBtn) initStr.push('<li class="last-page" value="' + pageCount + '"><span>' + lastText + '</span></li>');
                if (hasInput)
                    initStr.push('<div class="input-page-div">当前第<input type="text" maxlength="6" value="' + currentNum + '" />页，共<span>'
                        + pageCount
                        + '</span>页<button type="button" class="btn btn-xs input-btn-xs">确定</button></div>');
                initStr.push('</ul></nav>');

                $container.html(initStr.join(""));
                //初始化变量
                $parent = $container.children().children();
                if (hasFirstBtn) $firstBtn = $parent.children("li.first-page");
                if (hasPreBtn) $preBtn = $parent.children("li.pre-page");
                if (hasNextBtn) $nextBtn = $parent.children("li.next-page");
                if (hasLastBtn) $lastBtn = $parent.children("li.last-page");
                if (hasInput) {
                    $input = $parent.find("div.input-page-div>input");
                    $parent.find("div.input-page-div>button").click(function () {
                        _gotoPage($input.val());
                    });
                }
                //初始化功能按钮
                _buttonToggle(currentNum);
                //生成普通页码
                if (hasCommonPage) {
                    _createCommonPage(_computeStartNum(currentNum), currentNum);
                }
                //绑定点击事件
                $parent.on("click", "li", function () {
                    var $this = $(this);
                    if ($this.is("li") && $this.attr("value")) {
                        if (!$this.hasClass("disabled") && !$this.hasClass("active")) {
                            _gotoPage($this.attr("value"));
                        }
                    }
                });
            }
            //跳转到页码
            function _gotoPage(targetNum) {
                targetNum = _formatNum(targetNum);
                if (targetNum == 0 || targetNum == currentNum) return false;
                // 跳转前回调函数
                if (beforeFun && beforeFun(targetNum) === false) return false;
                //修改值
                currentNum = targetNum;
                if (hasInput) $input.val(targetNum);
                if (hasPreBtn) $preBtn.attr("value", targetNum - 1);
                if (hasNextBtn) $nextBtn.attr("value", targetNum + 1);
                //修改功能按钮的状态
                _buttonToggle(targetNum);
                // 计算起始页码
                if (hasCommonPage) {
                    var starNum = _computeStartNum(targetNum);
                    if (starNum == minNum) {// 要显示的页码是相同的
                        $currentPage.removeClass("active");
                        $currentPage = $parent.children("li.commonPage").eq(targetNum - minNum).addClass("active");
                    }
                    else {// 需要刷新页码
                        _createCommonPage(starNum, targetNum);
                    }
                }
                // 跳转后回调函数
                if (afterFun) afterFun(targetNum);
            }
            //整理目标页码的值
            function _formatNum(num) {
                num = Number(num);
                if (isNaN(num)) num = 0;
                else if (num <= 0) num = 1;
                else if (num > pageCount) num = pageCount;
                return num;
            }
            //功能按钮的开启与关闭
            function _buttonToggle(current) {
                if (current == 1) {
                    if (hasFirstBtn) $firstBtn.addClass("disabled");
                    if (hasPreBtn) $preBtn.addClass("disabled");
                }
                else {
                    if (hasFirstBtn) $firstBtn.removeClass("disabled");
                    if (hasPreBtn) $preBtn.removeClass("disabled");
                }

                if (current == pageCount) {
                    if (hasNextBtn) $nextBtn.addClass("disabled");
                    if (hasLastBtn) $lastBtn.addClass("disabled");
                }
                else {
                    if (hasNextBtn) $nextBtn.removeClass("disabled");
                    if (hasLastBtn) $lastBtn.removeClass("disabled");
                }
            }
            //计算当前显示的起始页码
            function _computeStartNum(targetNum) {
                var startNum;
                if (pageCount <= maxCommonLen)
                    startNum = 1;
                else {
                    if ((targetNum - minNum) >= (maxCommonLen - changeLen)) {//跳转到靠后的页码
                        startNum = targetNum - changeLen;
                        if ((startNum + maxCommonLen - 1) > pageCount) startNum = pageCount - (maxCommonLen - 1);// 边界修正
                    }
                    else if ((targetNum - minNum) <= (changeLen - 1)) {//跳转到靠前的页码
                        startNum = targetNum - (maxCommonLen - changeLen - 1);
                        if (startNum <= 0) startNum = 1;// 边界修正
                    }
                    else {// 不用改变页码
                        startNum = minNum;
                    }
                }
                return startNum;
            }
            //生成普通页码
            function _createCommonPage(startNum, activeNum) {
                var initStr = [];
                for (var i = 1, pageNum = startNum; i <= pageCount && i <= maxCommonLen; i++, pageNum++) {
                    initStr.push('<li class="commonPage" value="' + pageNum + '"><a href="javascript:">' + pageNum + '</a></li>');
                }

                $parent.hide();
                $parent.children("li.commonPage").remove();
                if (hasPreBtn) $preBtn.after(initStr.join(""));
                else if (hasFirstBtn) $firstBtn.after(initStr.join(""));
                else $parent.prepend(initStr.join(""));
                minNum = startNum;
                $currentPage = $parent.children("li.commonPage").eq(activeNum - startNum).addClass("active");
                $parent.show();
            }
        }

        function isEmpty(value) {
            if (value == "")
                return true;
            else
                return false;
        }

    </script>
    @RenderSection("scripts", required: false)
</body>
</html>
